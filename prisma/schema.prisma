generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Boards {
  id         Int         @id(map: "Boards_pk") @default(autoincrement())
  name       String      @db.VarChar(255)
  owner      Int
  icon       Int
  invite     String      @unique
  created_at DateTime    @default(now()) @db.Timestamp(6)
  updated_at DateTime    @default(now()) @db.Timestamp(6)
  Users      Users       @relation(fields: [owner], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Boards_fk0")
  Messages   Messages[]
  Savings    Savings[]
  Tasks      Tasks[]
  UserBoard  UserBoard[]
  UsersInfo  UsersInfo[]
  Warnings   Warnings[]
}

model Categories {
  id             Int              @id(map: "Categories_pk") @default(autoincrement())
  name           String           @db.VarChar(255)
  color          String           @db.VarChar
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  TaskCategories TaskCategories[]
}

model Messages {
  id         Int      @id(map: "Messages_pk") @default(autoincrement())
  message    String   @db.VarChar(255)
  board_id   Int
  user_id    Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  Boards     Boards   @relation(fields: [board_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Messages_fk0")
  Users      Users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Messages_fk1")
}

model Savings {
  id         Int      @id(map: "Savings_pk") @default(autoincrement())
  value      Int
  type       String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  user_id    Int
  board_id   Int
  Users      Users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Savings_fk0")
  Boards     Boards   @relation(fields: [board_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Savings_fk1")
}

model TaskCategories {
  id            Int        @id(map: "TaskCategories_pk") @default(autoincrement())
  task_id       Int
  categories_id Int
  Tasks         Tasks      @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TaskCategories_fk0")
  Categories    Categories @relation(fields: [categories_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TaskCategories_fk1")
}

model Tasks {
  id             Int              @id(map: "Tasks_pk") @default(autoincrement())
  name           String           @db.VarChar(255)
  creator        Int
  board_id       Int
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  TaskCategories TaskCategories[]
  Users          Users            @relation(fields: [creator], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Tasks_fk0")
  Boards         Boards           @relation(fields: [board_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Tasks_fk1")
  UserTask       UserTask[]
}

model UserBoard {
  id       Int    @id(map: "UserBoard_pk") @default(autoincrement())
  user_id  Int
  board_id Int
  Users    Users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "UserBoard_fk0")
  Boards   Boards @relation(fields: [board_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "UserBoard_fk1")
}

model UserTask {
  id            Int   @id(map: "UserTask_pk") @default(autoincrement())
  task_id       Int
  user_id      Int
  Tasks         Tasks @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "UserTask_fk0")
  Users         Users @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "UserTask_fk1")
}

model Users {
  id         Int         @id(map: "Users_pk") @default(autoincrement())
  username   String      @unique @db.VarChar(255)
  password   String      @db.VarChar(255)
  created_at DateTime    @default(now()) @db.Timestamp(6)
  updated_at DateTime    @default(now()) @db.Timestamp(6)
  Boards     Boards[]
  Messages   Messages[]
  Savings    Savings[]
  Tasks      Tasks[]
  UserBoard  UserBoard[]
  UserTask   UserTask[]
  UsersInfo  UsersInfo[]
  Warnings   Warnings[]
}

model UsersInfo {
  id         Int      @id(map: "UsersInfo_pk") @default(autoincrement())
  user_id    Int
  board_id   Int
  picture    String
  nickname   String   @db.VarChar(255)
  status     String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  Users      Users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "UsersInfo_fk0")
  Boards     Boards   @relation(fields: [board_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "UsersInfo_fk1")
}

model Warnings {
  id         Int      @id(map: "Warnings_pk") @default(autoincrement())
  text       String   @db.VarChar(255)
  board_id   Int
  creator    Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  Boards     Boards   @relation(fields: [board_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Warnings_fk0")
  Users      Users    @relation(fields: [creator], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Warnings_fk1")
}
